{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\shahar\\\\Desktop\\\\webS\\\\MyProjacts\\\\ChatPet\\\\client-side\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\shahar\\\\Desktop\\\\webS\\\\MyProjacts\\\\ChatPet\\\\client-side\\\\src\\\\components\\\\profile\\\\forms\\\\ProfilePicture.js\";\nimport React, { Fragment, useCallback, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport { getUserProfile, createPictureProfile } from '../../../actions/profileActs';\nimport Cropper from 'react-easy-crop';\nimport getCroppedImg from '../../imageSetting/cropImage';\nimport spinner from '../../../img/spinner.gif';\nimport Dropzone from '../../imageSetting/Dropezone';\n\nconst ProfilePicture = ({\n  profile: {\n    profileImage,\n    loading,\n    user: {\n      avatar\n    }\n  },\n  createPictureProfile,\n  getUserProfile,\n  history\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        image = _useState2[0],\n        setImage = _useState2[1];\n\n  const _useState3 = useState({\n    x: 0,\n    y: 0\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        crop = _useState4[0],\n        setCrop = _useState4[1];\n\n  const _useState5 = useState(1),\n        _useState6 = _slicedToArray(_useState5, 2),\n        zoom = _useState6[0],\n        setZoom = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        rotation = _useState8[0],\n        setRotation = _useState8[1];\n\n  const _useState9 = useState(null),\n        _useState10 = _slicedToArray(_useState9, 2),\n        croppedAreaPixels = _useState10[0],\n        setCroppedAreaPixels = _useState10[1];\n\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n  useEffect(() => {\n    getUserProfile();\n    setImage(profileImage);\n  }, [getUserProfile, setImage, profileImage]);\n\n  const getBase64 = image => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = error => reject(error);\n\n      reader.readAsDataURL(image);\n    });\n  };\n\n  const onDrop = async e => {\n    setImage((await getBase64(e[0])));\n    setCrop({\n      x: 0,\n      y: 0\n    });\n    setZoom(1);\n    setRotation(0);\n  };\n\n  const sentData = async e => {\n    e.preventDefault();\n    if (image === '') setImage(avatar);\n    const croppedImage = await getCroppedImg(image, croppedAreaPixels, rotation);\n    createPictureProfile(croppedImage, history);\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, loading ? React.createElement(\"img\", {\n    src: spinner,\n    alt: \"Loading...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: e => sentData(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, image ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"Update a profile picture\"), React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"*use the sliderss for edit and the rectangle below for change the picture\"), React.createElement(\"div\", {\n    className: \"crop-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(Cropper, {\n    image: image,\n    crop: crop,\n    zoom: zoom,\n    rotation: rotation,\n    aspect: 1,\n    cropShape: \"round\",\n    showGrid: false,\n    restrictPosition: false,\n    onCropChange: setCrop,\n    onZoomChange: setZoom,\n    onCropComplete: onCropComplete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \" Zoom\"), React.createElement(\"strong\", {\n    className: \"text-controler\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \" Rotation\"), React.createElement(\"span\", {\n    className: \"controlers-container zoom-controler\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"range\",\n    className: \"controlers\",\n    min: 1,\n    max: 3,\n    value: zoom,\n    step: 0.1,\n    onChange: e => setZoom(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    className: \"controlers-container rotation-controler\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"range\",\n    className: \"controlers\",\n    min: 0,\n    max: 360,\n    value: rotation,\n    step: 1,\n    onChange: e => setRotation(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })))) : React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Upload a profile picture\"), React.createElement(Dropzone, {\n    onDrop: e => onDrop(e),\n    multiple: false,\n    style: image ? 'smlDropzone' : 'bigDropzone',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primary my-1\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"btn btn-light my-1\",\n    onClick: setImage(avatar),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \" \", React.createElement(Link, {\n    to: \"/dashboard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Skip\")))));\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nProfilePicture.propTypes = {\n  createPictureProfile: PropTypes.func.isRequired,\n  getUserProfile: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\nexport default connect(mapStateToProps, {\n  createPictureProfile,\n  getUserProfile\n})(withRouter(ProfilePicture));","map":{"version":3,"sources":["C:/Users/shahar/Desktop/webS/MyProjacts/ChatPet/client-side/src/components/profile/forms/ProfilePicture.js"],"names":["React","Fragment","useCallback","useState","useEffect","PropTypes","connect","withRouter","Link","getUserProfile","createPictureProfile","Cropper","getCroppedImg","spinner","Dropzone","ProfilePicture","profile","profileImage","loading","user","avatar","history","image","setImage","x","y","crop","setCrop","zoom","setZoom","rotation","setRotation","croppedAreaPixels","setCroppedAreaPixels","onCropComplete","croppedArea","getBase64","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsDataURL","onDrop","e","sentData","preventDefault","croppedImage","target","value","mapStateToProps","state","propTypes","func","isRequired","object"],"mappings":"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","sourcesContent":["import React, { Fragment, useCallback, useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\nimport { withRouter, Link} from 'react-router-dom'\r\n\r\nimport {getUserProfile, createPictureProfile} from '../../../actions/profileActs'\r\n\r\nimport Cropper from 'react-easy-crop'\r\nimport getCroppedImg from '../../imageSetting/cropImage'\r\nimport spinner from '../../../img/spinner.gif'\r\nimport Dropzone from '../../imageSetting/Dropezone'\r\n\r\n\r\nconst ProfilePicture = ({\r\n    profile:{profileImage,\r\n       loading,\r\n        user:{\r\n          avatar\r\n        }\r\n      },\r\n    createPictureProfile,\r\n    getUserProfile,\r\n     history}) => {\r\n    const [image, setImage] = useState('')\r\n    const [crop, setCrop] = useState({ x: 0, y: 0 })\r\n    const [zoom, setZoom] = useState(1)\r\n    const [rotation, setRotation] = useState(0)\r\n    const [croppedAreaPixels, setCroppedAreaPixels] = useState(null)\r\n    const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n        setCroppedAreaPixels(croppedAreaPixels)\r\n      }, [])\r\n\r\n\r\n      useEffect(() =>  {\r\n        getUserProfile()\r\n        setImage(profileImage)\r\n        },[getUserProfile, setImage, profileImage])\r\n\r\n\r\n    const getBase64 = (image) => {\r\n        return new Promise((resolve,reject) => {\r\n           const reader = new FileReader();\r\n           reader.onload = () => resolve(reader.result);\r\n           reader.onerror = error => reject(error);\r\n           reader.readAsDataURL(image)\r\n        })}\r\n\r\n\r\n    const onDrop =async e =>{\r\n           setImage(await getBase64(e[0]))\r\n           setCrop({ x: 0, y: 0})\r\n           setZoom(1)\r\n           setRotation(0)  \r\n      }\r\n      \r\n    \r\n\r\n    const sentData = async (e) => {\r\n        e.preventDefault()\r\n        if(image ==='') setImage(avatar)\r\n        const croppedImage = await getCroppedImg(\r\n                image,\r\n                croppedAreaPixels,\r\n                rotation\r\n        )\r\n        createPictureProfile(croppedImage , history)\r\n        }\r\n                \r\n\r\n    return (\r\n        <Fragment>\r\n          {loading?         \r\n            <img src={spinner} alt='Loading...'\r\n            />  : <Fragment> \r\n        <form className=\"form\" onSubmit= {e => sentData(e)}>\r\n      {image? (\r\n      <div>          \r\n      <h1 className='large text-primary'>Update a profile picture</h1>\r\n      \r\n      <strong>\r\n            *use the sliderss for edit\r\n            and the rectangle below for change the picture\r\n      </strong>\r\n      <div className=\"crop-container\">\r\n        <Cropper\r\n          image={image}\r\n          crop={crop}\r\n          zoom={zoom}\r\n          rotation = {rotation}\r\n          aspect={1}\r\n          cropShape=\"round\"\r\n          showGrid={false}\r\n          restrictPosition={false}\r\n          onCropChange={setCrop}\r\n          onZoomChange={setZoom}\r\n          onCropComplete={onCropComplete}\r\n        /></div><div>\r\n        <strong> Zoom</strong>\r\n        <strong className=\"text-controler\"> Rotation</strong>\r\n        <span className=\"controlers-container zoom-controler\">\r\n        <input \r\n            type=\"range\" \r\n            className=\"controlers\"\r\n            min={1} \r\n            max={3}\r\n            value={zoom}\r\n            step={0.1}\r\n            onChange={(e) => setZoom(e.target.value)}\r\n        /></span>\r\n        <span className=\"controlers-container rotation-controler\">\r\n        <input \r\n            type=\"range\" \r\n            className=\"controlers\"\r\n            min={0} \r\n            max={360}\r\n            value={rotation}\r\n            step={1}\r\n            onChange={(e) => setRotation(e.target.value)}\r\n      /></span>\r\n      </div>\r\n      </div>):(\r\n      <h1 className='large text-primary'>Upload a profile picture</h1>\r\n      )}\r\n      <Dropzone \r\n        onDrop={(e) => onDrop(e)}  \r\n        multiple={false}\r\n        style={image ? ('smlDropzone'\r\n        ):(\r\n        'bigDropzone')}/>           \r\n        <input type=\"submit\" className=\"btn btn-primary my-1\"  value='Submit'/>\r\n        <button className=\"btn btn-light my-1\" onClick={setImage(avatar)}> <Link to='/dashboard'>Skip</Link></button>\r\n      </form>\r\n      </Fragment>}\r\n    </Fragment>\r\n    )\r\n     }\r\n\r\n     const mapStateToProps = state => ({\r\n      profile: state.profile\r\n    })\r\n\r\nProfilePicture.propTypes = {\r\n    createPictureProfile: PropTypes.func.isRequired,\r\n    getUserProfile: PropTypes.func.isRequired,\r\n    profile: PropTypes.object.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n    {createPictureProfile, getUserProfile}) (withRouter(ProfilePicture))\r\n"]},"metadata":{},"sourceType":"module"}
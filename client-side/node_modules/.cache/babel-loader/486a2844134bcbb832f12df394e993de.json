{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alertAct';\nimport { GET_PROFILE, GET_PROFILES, PROFILE_ERROR, CLEAR_PROFILE, ACCOUNT_DELETED, GET_PET, PET_ERROR } from './consts'; //get user profile\n\nexport const getUserProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('http://localhost:5000/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      data: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      data: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //create or updite pet profile\n\nexport const createPet = (petFormData, //  images,\nhistory, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('http://localhost:5000/api/pets', petFormData, config); // const petId = await res.data._id\n    // if (images){\n    //     addPetImages(images, petId)\n    // }\n\n    dispatch({\n      type: GET_PET,\n      data: res.data\n    });\n    dispatch(setAlert(edit ? 'Pet Profile Updated' : 'Pet Profile Created', 'success')); // if(!edit){\n    //     history.push('/profiles/profilePicture')\n    // } \n    // history.push('/dashboard')\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PET_ERROR,\n      data: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //add photos to pet\n\nexport const addPetImages = async (image, id) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const data = {\n    image: image,\n    petId: id\n  };\n  console.log(d);\n\n  try {\n    const res = await axios.post('http://localhost:5000/api/pets/photos', data, config);\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => setAlert(error.msg, 'danger'));\n    }\n  }\n}; // get all the profiles\n\nexport const getProfiles = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get('http://localhost:5000/api/profile');\n    dispatch({\n      type: GET_PROFILES,\n      data: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      data: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // get profile by id\n\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(`http://localhost:5000/api/profile/user/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      data: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      data: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; //create or updite profile picture\n\nexport const createPictureProfile = (image, history) => async dispatch => {\n  if (!image) {\n    dispatch(setAlert('You should upload a photo, or click \"skip\"', 'danger'));\n  } else {\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const data = {\n        profileImage: image\n      };\n      const res = await axios.post('http://localhost:5000/api/profile/profilePicture', data, config);\n      dispatch({\n        type: GET_PROFILE,\n        data: res.data\n      });\n      dispatch(setAlert('Profile Picture is set', 'success'));\n      history.push('/dashboard');\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: PROFILE_ERROR,\n        data: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n}; // Delete account & profile\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Are you sure? This can NOT be undone!')) {\n    try {\n      await axios.delete('/api/profile/me');\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert('Your account has been permanantly deleted'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  } //תזכור להוסיף פקודה שמוחקת את כל החיות של המשתמש\n\n};","map":{"version":3,"sources":["C:/Users/shahar/Desktop/webS/MyProjacts/ChatPet/client-side/src/actions/petActs.js"],"names":["axios","setAlert","GET_PROFILE","GET_PROFILES","PROFILE_ERROR","CLEAR_PROFILE","ACCOUNT_DELETED","GET_PET","PET_ERROR","getUserProfile","dispatch","res","get","type","data","err","msg","response","statusText","status","createPet","petFormData","history","edit","config","headers","post","errors","forEach","error","addPetImages","image","id","petId","console","log","d","getProfiles","getProfileById","userId","createPictureProfile","profileImage","push","deleteAccount","window","confirm","delete","payload"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {setAlert} from './alertAct'\r\nimport{\r\n    GET_PROFILE,\r\n    GET_PROFILES,\r\n    PROFILE_ERROR,\r\n    CLEAR_PROFILE,\r\n    ACCOUNT_DELETED, \r\n    GET_PET,\r\n    PET_ERROR\r\n  } from './consts'\r\n\r\n\r\n//get user profile\r\nexport const getUserProfile = () => async dispatch => {\r\ntry{\r\n  const res = await axios.get('http://localhost:5000/api/profile/me')\r\n\r\n    dispatch({\r\n        type: GET_PROFILE,\r\n        data: res.data\r\n    })\r\n} catch (err){\r\n    dispatch({\r\n        type: PROFILE_ERROR,\r\n        data: {\r\n            msg: err.response.statusText,\r\n            status: err.response.status\r\n    }\r\n    })\r\n\r\n}\r\n}\r\n//create or updite pet profile\r\nexport const createPet = (petFormData,\r\n    //  images,\r\n      history, edit = false) => async dispatch => {\r\n    try {\r\n\r\n        const config = {\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n\r\n        const res = await axios.post('http://localhost:5000/api/pets', petFormData, config)\r\n\r\n        // const petId = await res.data._id\r\n        // if (images){\r\n        //     addPetImages(images, petId)\r\n        // }\r\n\r\n        dispatch({\r\n            type: GET_PET,\r\n            data: res.data\r\n        })\r\n\r\n        dispatch(setAlert(edit ? 'Pet Profile Updated' : 'Pet Profile Created', 'success'))\r\n        // if(!edit){\r\n        //     history.push('/profiles/profilePicture')\r\n        // } \r\n\r\n        // history.push('/dashboard')\r\n        \r\n    } catch (err) {\r\n        const errors = err.response.data.errors;\r\n  \r\n        if (errors) {\r\n          errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n\r\n        dispatch({\r\n            type: PET_ERROR,\r\n            data: {\r\n                msg: err.response.statusText,\r\n                status: err.response.status\r\n        }\r\n    })\r\n    }\r\n}\r\n\r\n//add photos to pet\r\nexport const addPetImages = async (image, id)  =>{\r\n\r\n    const config = {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }\r\n    const data ={\r\n        image: image,\r\n        petId: id\r\n        }\r\n    console.log(d)\r\n\r\n        try {\r\n        const res = await axios.post('http://localhost:5000/api/pets/photos', data, config)\r\n      } catch (err) {\r\n        const errors = err.response.data.errors;\r\n  \r\n        if (errors) {\r\n          errors.forEach(error => setAlert(error.msg, 'danger'))\r\n        }\r\n      }\r\n}\r\n\r\n// get all the profiles\r\n    export const getProfiles = () => async dispatch => {\r\n      dispatch({type: CLEAR_PROFILE})\r\n      try{\r\n        const res = await axios.get('http://localhost:5000/api/profile')\r\n      \r\n          dispatch({\r\n              type: GET_PROFILES,\r\n              data: res.data\r\n          })\r\n      } catch (err){\r\n          dispatch({\r\n              type: PROFILE_ERROR,\r\n              data: {\r\n                  msg: err.response.statusText,\r\n                  status: err.response.status\r\n          }\r\n          })\r\n        }\r\n      }\r\n\r\n// get profile by id\r\nexport const getProfileById = userId => async dispatch => {\r\n  try{\r\n    const res = await axios.get(`http://localhost:5000/api/profile/user/${userId}`)\r\n  \r\n      dispatch({\r\n          type: GET_PROFILE,\r\n          data: res.data\r\n      })\r\n  } catch (err){\r\n      dispatch({\r\n          type: PROFILE_ERROR,\r\n          data: {\r\n              msg: err.response.statusText,\r\n              status: err.response.status\r\n      }\r\n      })\r\n    }\r\n  }\r\n\r\n//create or updite profile picture\r\nexport const createPictureProfile = (image, history) => async dispatch => {\r\n    if(!image){\r\n        dispatch(setAlert('You should upload a photo, or click \"skip\"', 'danger'))\r\n    }\r\n    else{\r\n    try {\r\n        const config = {\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n\r\n        const data = {\r\n            profileImage: image\r\n        }\r\n        const res = await axios.post(\r\n            'http://localhost:5000/api/profile/profilePicture', data, config)\r\n\r\n\r\n            dispatch({\r\n                type: GET_PROFILE,\r\n                data: res.data\r\n            })\r\n\r\n        dispatch(setAlert('Profile Picture is set', 'success'))\r\n\r\n        history.push('/dashboard')\r\n  } catch (err) {\r\n        const errors = err.response.data.errors;\r\n  \r\n        if (errors) {\r\n          errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n\r\n        dispatch({\r\n            type: PROFILE_ERROR,\r\n            data: {\r\n                msg: err.response.statusText,\r\n                status: err.response.status\r\n        }\r\n        })\r\n    }\r\n}}\r\n\r\n// Delete account & profile\r\nexport const deleteAccount = () => async dispatch => {\r\n    if (window.confirm('Are you sure? This can NOT be undone!')) {\r\n      try {\r\n        await axios.delete('/api/profile/me');\r\n  \r\n        dispatch({ type: CLEAR_PROFILE });\r\n        dispatch({ type: ACCOUNT_DELETED });\r\n  \r\n        dispatch(setAlert('Your account has been permanantly deleted'));\r\n      } catch (err) {\r\n        dispatch({\r\n          type: PROFILE_ERROR,\r\n          payload: { msg: err.response.statusText, status: err.response.status }\r\n        });\r\n      }\r\n    }\r\n    //תזכור להוסיף פקודה שמוחקת את כל החיות של המשתמש\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}
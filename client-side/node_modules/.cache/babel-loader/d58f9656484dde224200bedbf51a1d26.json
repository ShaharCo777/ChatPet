{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shahar\\\\Desktop\\\\webS\\\\MyProjacts\\\\ChatPet\\\\client-side\\\\src\\\\components\\\\drag&drop\\\\Dropezone.js\";\nimport React from \"react\";\nimport { useDropzone } from \"react-dropzone\";\n\nconst Dropzone = ({\n  onDrop,\n  accept\n}) => {\n  // Initializing useDropzone hooks with options\n  const _useDropzone = useDropzone({\n    onDrop,\n    accept\n  }),\n        getRootProps = _useDropzone.getRootProps,\n        getInputProps = _useDropzone.getInputProps,\n        isDragActive = _useDropzone.isDragActive;\n  /* \r\n    useDropzone hooks exposes two functions called getRootProps and getInputProps\r\n    and also exposes isDragActive boolean\r\n  */\n\n\n  return React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), React.createElement(\"input\", Object.assign({\n    className: \"dropzone-input\"\n  }, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, isDragActive ? React.createElement(\"p\", {\n    className: \"dropzone-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"Release to drop the files here\") : React.createElement(\"p\", {\n    className: \"dropzone-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Drag 'n' drop some files here, or click to select files\")));\n};\n\nexport default Dropzone;","map":{"version":3,"sources":["C:/Users/shahar/Desktop/webS/MyProjacts/ChatPet/client-side/src/components/drag&drop/Dropezone.js"],"names":["React","useDropzone","Dropzone","onDrop","accept","getRootProps","getInputProps","isDragActive"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAwB;AACvC;AADuC,uBAEeH,WAAW,CAAC;AAChEE,IAAAA,MADgE;AAEhEC,IAAAA;AAFgE,GAAD,CAF1B;AAAA,QAE/BC,YAF+B,gBAE/BA,YAF+B;AAAA,QAEjBC,aAFiB,gBAEjBA,aAFiB;AAAA,QAEFC,YAFE,gBAEFA,YAFE;AAQvC;;;;;;AAKA,SACE,6CAASF,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE;AAAO,IAAA,SAAS,EAAC;AAAjB,KAAsCC,aAAa,EAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAEE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,YAAY,GACX;AAAG,IAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADW,GAGX;AAAG,IAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAJJ,CAFF,CADF;AAcD,CA3BD;;AA6BA,eAAeL,QAAf","sourcesContent":["import React from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\n\r\nconst Dropzone = ({ onDrop, accept }) => {\r\n  // Initializing useDropzone hooks with options\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    accept,\r\n    \r\n  });\r\n\r\n  /* \r\n    useDropzone hooks exposes two functions called getRootProps and getInputProps\r\n    and also exposes isDragActive boolean\r\n  */\r\n\r\n  return (\r\n    <div {...getRootProps()}>\r\n      <input className=\"dropzone-input\" {...getInputProps()} />\r\n      <div className=\"text-center\">\r\n        {isDragActive ? (\r\n          <p className=\"dropzone-content\">Release to drop the files here</p>\r\n        ) : (\r\n          <p className=\"dropzone-content\">\r\n            Drag 'n' drop some files here, or click to select files\r\n          </p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropzone;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\shahar\\\\Desktop\\\\webS\\\\MyProjacts\\\\ChatPet\\\\client-side\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\shahar\\\\Desktop\\\\webS\\\\MyProjacts\\\\ChatPet\\\\client-side\\\\src\\\\components\\\\profile\\\\forms\\\\ProfilePicture\\\\UpdateProfilePicture.js\";\nimport React, { Fragment, useCallback, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Dropzone from '../../../drag&drop/Dropezone';\nimport { connect } from 'react-redux';\nimport { withRouter, Link } from 'react-router-dom';\nimport { getUserProfilePicture, createPictureProfile } from '../../../../actions/profileActs';\nimport Cropper from 'react-easy-crop';\nimport getCroppedImg from '../../../../cropImage';\n\nconst UpDatePicture = ({\n  profileImage,\n  createPictureProfile,\n  getUserProfilePicture,\n  history\n}) => {\n  const _useState = useState('bigDropzone'),\n        _useState2 = _slicedToArray(_useState, 2),\n        dropStyle = _useState2[0],\n        setDropStyle = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        image = _useState4[0],\n        setImage = _useState4[1];\n\n  const _useState5 = useState({\n    x: 0,\n    y: 0\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        crop = _useState6[0],\n        setCrop = _useState6[1];\n\n  const _useState7 = useState(1),\n        _useState8 = _slicedToArray(_useState7, 2),\n        zoom = _useState8[0],\n        setZoom = _useState8[1];\n\n  const _useState9 = useState(0),\n        _useState10 = _slicedToArray(_useState9, 2),\n        rotation = _useState10[0],\n        setRotation = _useState10[1];\n\n  const _useState11 = useState(null),\n        _useState12 = _slicedToArray(_useState11, 2),\n        croppedAreaPixels = _useState12[0],\n        setCroppedAreaPixels = _useState12[1];\n\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n  useEffect(() => {\n    getUserProfilePicture();\n    console.log(profileImage);\n    setImage(profileImage);\n    console.log(image);\n  }, []);\n\n  const getBase64 = image => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n\n      reader.onload = () => resolve(reader.result);\n\n      reader.onerror = error => reject(error);\n\n      reader.readAsDataURL(image);\n    });\n  };\n\n  const onDrop = async e => {\n    console.log('2');\n    getUserProfilePicture();\n    setImage((await getBase64(e[0])));\n    setCrop({\n      x: 0,\n      y: 0\n    });\n    setZoom(1);\n    setRotation(0);\n    setDropStyle('smlDropzone');\n  };\n\n  const sentData = async e => {\n    e.preventDefault();\n    const croppedImage = await getCroppedImg(image, croppedAreaPixels, rotation);\n    createPictureProfile(croppedImage, history);\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: e => sentData(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"text-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"Set up a profile picture\")), image ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"crop-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Cropper, {\n    image: image,\n    crop: crop,\n    zoom: zoom,\n    rotation: rotation,\n    aspect: 1,\n    cropShape: \"round\",\n    showGrid: false,\n    restrictPosition: false,\n    onCropChange: setCrop,\n    onZoomChange: setZoom,\n    onCropComplete: onCropComplete,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"controlers-container zoom-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"small\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"* = required field\"), React.createElement(\"input\", {\n    type: \"range\",\n    className: \"controls\",\n    min: 1,\n    max: 3,\n    value: zoom,\n    step: 0.1,\n    onChange: e => setZoom(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    className: \"controlers-container rotation-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \" Let's get started!\"), React.createElement(\"input\", {\n    type: \"range\",\n    className: \"controls\",\n    min: 0,\n    max: 360,\n    value: rotation,\n    step: 1,\n    onChange: e => setRotation(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })))) : null, React.createElement(Dropzone, {\n    onDrop: e => onDrop(e),\n    multiple: false,\n    style: dropStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primary my-1\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"btn btn-light my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \" \", React.createElement(Link, {\n    to: \"/dashboard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Skip\"))));\n};\n\nconst mapStateToProps = state => ({\n  profileImage: state.profileImage\n});\n\nUpDatePicture.propTypes = {\n  createPictureProfile: PropTypes.func.isRequired,\n  getUserProfilePicture: PropTypes.func.isRequired,\n  profileImage: PropTypes.string.isRequired\n};\nexport default connect(mapStateToProps, {\n  createPictureProfile,\n  getUserProfilePicture\n})(withRouter(UpDatePicture));","map":{"version":3,"sources":["C:/Users/shahar/Desktop/webS/MyProjacts/ChatPet/client-side/src/components/profile/forms/ProfilePicture/UpdateProfilePicture.js"],"names":["React","Fragment","useCallback","useState","useEffect","PropTypes","Dropzone","connect","withRouter","Link","getUserProfilePicture","createPictureProfile","Cropper","getCroppedImg","UpDatePicture","profileImage","history","dropStyle","setDropStyle","image","setImage","x","y","crop","setCrop","zoom","setZoom","rotation","setRotation","croppedAreaPixels","setCroppedAreaPixels","onCropComplete","croppedArea","console","log","getBase64","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsDataURL","onDrop","e","sentData","preventDefault","croppedImage","target","value","mapStateToProps","state","propTypes","func","isRequired","string"],"mappings":"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","sourcesContent":["import React, { Fragment, useCallback, useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Dropzone from '../../../drag&drop/Dropezone'\r\nimport {connect} from 'react-redux'\r\nimport { withRouter, Link} from 'react-router-dom'\r\nimport {getUserProfilePicture, createPictureProfile} from '../../../../actions/profileActs'\r\nimport Cropper from 'react-easy-crop'\r\nimport getCroppedImg from '../../../../cropImage'\r\n\r\nconst UpDatePicture = ({\r\n    profileImage,\r\n    createPictureProfile,\r\n    getUserProfilePicture,\r\n     history}) => {\r\n    const [dropStyle, setDropStyle] = useState('bigDropzone')\r\n    const [image, setImage] = useState('')\r\n    const [crop, setCrop] = useState({ x: 0, y: 0 })\r\n    const [zoom, setZoom] = useState(1)\r\n    const [rotation, setRotation] = useState(0)\r\n    const [croppedAreaPixels, setCroppedAreaPixels] = useState(null)\r\n    const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n        setCroppedAreaPixels(croppedAreaPixels)\r\n      }, [])\r\n\r\n\r\n      useEffect(() =>  {\r\n        getUserProfilePicture()\r\n        console.log(profileImage)\r\n        setImage(profileImage)\r\n        console.log(image)\r\n        },[])\r\n\r\n\r\n    const getBase64 = (image) => {\r\n        return new Promise((resolve,reject) => {\r\n           const reader = new FileReader();\r\n           reader.onload = () => resolve(reader.result);\r\n           reader.onerror = error => reject(error);\r\n           reader.readAsDataURL(image)\r\n        })}\r\n\r\n\r\n    const onDrop =async e =>{\r\n      console.log('2')\r\n           getUserProfilePicture()\r\n           setImage(await getBase64(e[0]))\r\n           setCrop({ x: 0, y: 0})\r\n           setZoom(1)\r\n           setRotation(0)  \r\n           setDropStyle('smlDropzone')\r\n      }\r\n      \r\n    \r\n\r\n    const sentData = async (e) => {\r\n        e.preventDefault()\r\n        const croppedImage = await getCroppedImg(\r\n                image,\r\n                croppedAreaPixels,\r\n                rotation\r\n        )\r\n        createPictureProfile(croppedImage , history)\r\n        }\r\n                \r\n\r\n    return (\r\n        <Fragment>\r\n        <form className=\"form\" onSubmit= {e => sentData(e)}>\r\n         <div className=\"form-group\">\r\n        <h1 className=\"text-center\">Set up a profile picture</h1>\r\n        </div>\r\n     {image ? <div>\r\n      <div className=\"crop-container\">\r\n        <Cropper\r\n          image={image}\r\n          crop={crop}\r\n          zoom={zoom}\r\n          rotation = {rotation}\r\n          aspect={1}\r\n          cropShape=\"round\"\r\n          showGrid={false}\r\n          restrictPosition={false}\r\n          onCropChange={setCrop}\r\n          onZoomChange={setZoom}\r\n          onCropComplete={onCropComplete}\r\n        /></div><div>\r\n        <span className=\"controlers-container zoom-control\">\r\n        <small>* = required field</small>\r\n        <input \r\n            type=\"range\" \r\n            className=\"controls\"\r\n            min={1} \r\n            max={3}\r\n            value={zoom}\r\n            step={0.1}\r\n            onChange={(e) => setZoom(e.target.value)}\r\n        /></span>\r\n        <span className=\"controlers-container rotation-control\">\r\n        <strong> Let's get started!</strong>\r\n        <input \r\n            type=\"range\" \r\n            className=\"controls\"\r\n            min={0} \r\n            max={360}\r\n            value={rotation}\r\n            step={1}\r\n            onChange={(e) => setRotation(e.target.value)}\r\n        /></span>\r\n      </div>\r\n      </div>: null}\r\n      <Dropzone \r\n        onDrop={(e) => onDrop(e)}  \r\n        multiple={false}\r\n        style={dropStyle}/>\r\n        <input type=\"submit\" className=\"btn btn-primary my-1\"  value='Submit'/>\r\n        <button className=\"btn btn-light my-1\"> <Link to='/dashboard'>Skip</Link></button>\r\n      </form>\r\n    </Fragment>\r\n    )\r\n     }\r\n\r\n     const mapStateToProps = state => ({\r\n      profileImage: state.profileImage\r\n    })\r\n\r\n     UpDatePicture.propTypes = {\r\n    createPictureProfile: PropTypes.func.isRequired,\r\n    getUserProfilePicture: PropTypes.func.isRequired,\r\n    profileImage: PropTypes.string.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n    {createPictureProfile, getUserProfilePicture}) (withRouter(UpDatePicture))\r\n"]},"metadata":{},"sourceType":"module"}
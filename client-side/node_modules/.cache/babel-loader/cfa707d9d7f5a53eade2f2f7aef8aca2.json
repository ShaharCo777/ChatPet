{"ast":null,"code":"import React,{Fragment,useEffect}from'react';import{connect}from'react-redux';import{getProfiles}from'../../../actions/profileActs';import spinner from'../../../img/spinner.gif';import ProfileItem from'./ProfileItem';var Profiles=function Profiles(_ref){var getProfiles=_ref.getProfiles,_ref$profile=_ref.profile,profiles=_ref$profile.profiles,loading=_ref$profile.loading;useEffect(function(){getProfiles();},[getProfiles]);return React.createElement(Fragment,null,loading?React.createElement(\"img\",{src:spinner,alt:\"Loading...\"}):React.createElement(Fragment,null,React.createElement(\"h1\",{className:\"large text-primary\"},\"Found People\"),React.createElement(\"p\",{className:\"lead\"},React.createElement(\"i\",{className:\"fab fa-connectdevelop\"}),\" Browse and connect with more pet lovers\"),React.createElement(\"div\",{className:\"profiles\"},profiles.length>0?profiles.map(function(profile){return React.createElement(ProfileItem,{key:profile._id,profile:profile});}):React.createElement(\"h4\",null,\"No profiles found...\"))));};var mapStateToProps=function mapStateToProps(state){return{profile:state.profile};};export default connect(mapStateToProps,{getProfiles:getProfiles})(Profiles);","map":{"version":3,"sources":["C:/Users/shahar/Desktop/webS/MyProjacts/ChatPet/client-side/src/components/profile/showProfiles/Profiles.js"],"names":["React","Fragment","useEffect","connect","getProfiles","spinner","ProfileItem","Profiles","profile","profiles","loading","length","map","_id","mapStateToProps","state"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,CAEA,OAAQC,OAAR,KAAsB,aAAtB,CAEA,OAAQC,WAAR,KAA0B,8BAA1B,CAEA,MAAOC,CAAAA,OAAP,KAAoB,0BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MACsB,IADpBH,CAAAA,WACoB,MADpBA,WACoB,mBAAlCI,OAAkC,CAAxBC,QAAwB,cAAxBA,QAAwB,CAAdC,OAAc,cAAdA,OAAc,CAEnCR,SAAS,CAAC,UAAK,CACXE,WAAW,GACd,CAFQ,CAEN,CAACA,WAAD,CAFM,CAAT,CAIA,MACA,qBAAC,QAAD,MACKM,OAAO,CACR,2BAAK,GAAG,CAAEL,OAAV,CAAmB,GAAG,CAAC,YAAvB,EADQ,CAEF,oBAAC,QAAD,MACF,0BAAI,SAAS,CAAC,oBAAd,iBADE,CAEF,yBAAG,SAAS,CAAC,MAAb,EACA,yBAAG,SAAS,CAAC,uBAAb,EADA,4CAFE,CAMF,2BAAK,SAAS,CAAC,UAAf,EACCI,QAAQ,CAACE,MAAT,CAAkB,CAAlB,CACDF,QAAQ,CAACG,GAAT,CAAa,SAAAJ,OAAO,QACpB,qBAAC,WAAD,EAAa,GAAG,CAAEA,OAAO,CAACK,GAA1B,CAA+B,OAAO,CAAEL,OAAxC,EADoB,EAApB,CADC,CAKC,qDANF,CANE,CAHV,CADA,CAuBH,CA9BD,CAgCA,GAAMM,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,QAAK,CAC9BP,OAAO,CAAEO,KAAK,CAACP,OADe,CAAL,EAA7B,CASA,cAAeL,CAAAA,OAAO,CAACW,eAAD,CACtB,CAACV,WAAW,CAAXA,WAAD,CADsB,CAAP,CACAG,QADA,CAAf","sourcesContent":["import React, {Fragment, useEffect} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {connect} from 'react-redux'\r\n\r\nimport {getProfiles} from '../../../actions/profileActs'\r\n\r\nimport spinner from '../../../img/spinner.gif'\r\nimport ProfileItem from './ProfileItem'\r\n\r\nconst Profiles = ({getProfiles,\r\n     profile: {profiles, loading}}) => {\r\n\r\n    useEffect(() =>{\r\n        getProfiles()\r\n    }, [getProfiles])\r\n\r\n    return (\r\n    <Fragment>\r\n        {loading?         \r\n        <img src={spinner} alt='Loading...'\r\n        />  : <Fragment>   \r\n            <h1 className='large text-primary'>Found People</h1>\r\n            <p className='lead'>\r\n            <i className='fab fa-connectdevelop' /> Browse and connect with\r\n                        more pet lovers\r\n            </p>\r\n            <div className='profiles'>\r\n            {profiles.length > 0 ? (\r\n            profiles.map(profile => (\r\n            <ProfileItem key={profile._id} profile={profile} />\r\n            ))\r\n            ) : (\r\n              <h4>No profiles found...</h4>\r\n            )}\r\n          </div>\r\n        </Fragment>}\r\n\r\n    </Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    profile: state.profile\r\n})\r\n\r\nProfiles.propTypes = {\r\n getProfiles: PropTypes.func.isRequired,\r\n profile: PropTypes.object.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n{getProfiles})(Profiles)\r\n"]},"metadata":{},"sourceType":"module"}
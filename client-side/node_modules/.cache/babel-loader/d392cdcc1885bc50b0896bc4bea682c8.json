{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alertAct';\nimport { GET_PROFILE, GET_PROFILES, PROFILE_ERROR, ACCOUNT_DELETED } from './consts'; //get user profile\n\nexport const getUserProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('http://localhost:5000/api/profile/me');\n    console.log(res.data);\n    dispatch({\n      type: GET_PROFILE,\n      data: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      data: {\n        msg: err,\n        status: err\n      }\n    });\n  }\n}; //create or updite profile\n\nexport const createProfile = (FormData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('http://localhost:5000/api/profile/me', FormData, config);\n    dispatch({\n      type: GET_PROFILE,\n      data: res.data\n    });\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n    if (!edit) {\n      history.push('/profiles/profilePicture');\n    }\n\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      data: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // get all the profiles\n\nexport const getProfiles = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get('http://localhost:5000/api/profile');\n    dispatch({\n      type: GET_PROFILES,\n      data: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      data: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // get profile by id\n\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(`http://localhost:5000/api/profile/user/${userId}`);\n    dispatch({\n      type: GET_PROFILE,\n      data: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      data: {\n        msg: err,\n        status: err\n      }\n    });\n  }\n}; //create or updite profile picture\n\nexport const createPictureProfile = (image, history) => async dispatch => {\n  if (!image) {\n    dispatch(setAlert('You should upload a photo, or click \"skip\"', 'danger'));\n  } else {\n    try {\n      const config = {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      };\n      const data = {\n        profileImage: image\n      };\n      const res = await axios.post('http://localhost:5000/api/profile/profilePicture', data, config);\n      dispatch({\n        type: GET_PROFILE,\n        data: res.data\n      });\n      dispatch(setAlert('Profile Picture is set', 'success'));\n      history.push('/dashboard');\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: PROFILE_ERROR,\n        data: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n}; // Delete account & profile\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Are you sure? This can NOT be undone!')) {\n    try {\n      await axios.delete('/api/profile/me');\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert('Your account has been permanantly deleted'));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  } //תזכור להוסיף פקודה שמוחקת את כל החיות של המשתמש\n\n};","map":{"version":3,"sources":["C:/Users/shahar/Desktop/webS/MyProjacts/ChatPet/client-side/src/actions/profileActs.js"],"names":["axios","setAlert","GET_PROFILE","GET_PROFILES","PROFILE_ERROR","ACCOUNT_DELETED","getUserProfile","dispatch","res","get","console","log","data","type","err","msg","status","createProfile","FormData","history","edit","config","headers","post","push","errors","response","forEach","error","statusText","getProfiles","CLEAR_PROFILE","getProfileById","userId","createPictureProfile","image","profileImage","deleteAccount","window","confirm","delete","payload"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {setAlert} from './alertAct'\r\n\r\nimport{\r\n  \r\n    GET_PROFILE,\r\n    GET_PROFILES,\r\n    PROFILE_ERROR,\r\n    ACCOUNT_DELETED\r\n  } from './consts'\r\n\r\n\r\n//get user profile\r\nexport const getUserProfile = () => async dispatch => {\r\ntry{\r\n  const res = await axios.get('http://localhost:5000/api/profile/me')\r\n  console.log(res.data)\r\n    dispatch({\r\n        type: GET_PROFILE,\r\n        data: res.data\r\n    })\r\n} catch (err){\r\n    dispatch({\r\n        type: PROFILE_ERROR,\r\n        data: {\r\n            msg: err,\r\n            status: err\r\n    }\r\n    })\r\n\r\n}\r\n}\r\n//create or updite profile\r\nexport const createProfile = (FormData, history, edit = false) => async dispatch => {\r\n    try {\r\n        const config = {\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n\r\n        const res = await axios.post('http://localhost:5000/api/profile/me', FormData, config)\r\n\r\n        dispatch({\r\n            type: GET_PROFILE,\r\n            data: res.data\r\n        })\r\n\r\n        dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'))\r\n        if(!edit){\r\n            history.push('/profiles/profilePicture')\r\n        } \r\n\r\n        history.push('/dashboard')\r\n        \r\n    } catch (err) {\r\n        const errors = err.response.data.errors;\r\n  \r\n        if (errors) {\r\n          errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n\r\n        dispatch({\r\n            type: PROFILE_ERROR,\r\n            data: {\r\n                msg: err.response.statusText,\r\n                status: err.response.status\r\n        }\r\n    })\r\n    }\r\n}\r\n\r\n// get all the profiles\r\n    export const getProfiles = () => async dispatch => {\r\n      dispatch({type: CLEAR_PROFILE})\r\n      try{\r\n        const res = await axios.get('http://localhost:5000/api/profile')\r\n      \r\n          dispatch({\r\n              type: GET_PROFILES,\r\n              data: res.data\r\n          })\r\n      } catch (err){\r\n          dispatch({\r\n              type: PROFILE_ERROR,\r\n              data: {\r\n                  msg: err.response.statusText,\r\n                  status: err.response.status\r\n          }\r\n          })\r\n        }\r\n      }\r\n\r\n// get profile by id\r\nexport const getProfileById = userId => async dispatch => {\r\n  try{\r\n    const res = await axios.get(`http://localhost:5000/api/profile/user/${userId}`)\r\n  \r\n      dispatch({\r\n          type: GET_PROFILE,\r\n          data: res.data\r\n      })\r\n  } catch (err){\r\n      dispatch({\r\n          type: PROFILE_ERROR,\r\n          data: {\r\n              msg: err,\r\n              status: err\r\n      }\r\n      })\r\n    }\r\n  }\r\n\r\n//create or updite profile picture\r\nexport const createPictureProfile = (image, history) => async dispatch => {\r\n    if(!image){\r\n        dispatch(setAlert('You should upload a photo, or click \"skip\"', 'danger'))\r\n    }\r\n    else{\r\n    try {\r\n        const config = {\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n          }\r\n\r\n        const data = {\r\n            profileImage: image\r\n        }\r\n        const res = await axios.post(\r\n            'http://localhost:5000/api/profile/profilePicture', data, config)\r\n\r\n\r\n            dispatch({\r\n                type: GET_PROFILE,\r\n                data: res.data\r\n            })\r\n\r\n        dispatch(setAlert('Profile Picture is set', 'success'))\r\n\r\n        history.push('/dashboard')\r\n  } catch (err) {\r\n        const errors = err.response.data.errors;\r\n  \r\n        if (errors) {\r\n          errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n\r\n        dispatch({\r\n            type: PROFILE_ERROR,\r\n            data: {\r\n                msg: err.response.statusText,\r\n                status: err.response.status\r\n        }\r\n        })\r\n    }\r\n}}\r\n\r\n// Delete account & profile\r\nexport const deleteAccount = () => async dispatch => {\r\n    if (window.confirm('Are you sure? This can NOT be undone!')) {\r\n      try {\r\n        await axios.delete('/api/profile/me')\r\n  \r\n        dispatch({ type: CLEAR_PROFILE })\r\n        dispatch({ type: ACCOUNT_DELETED })\r\n  \r\n        dispatch(setAlert('Your account has been permanantly deleted'))\r\n      } catch (err) {\r\n        dispatch({\r\n          type: PROFILE_ERROR,\r\n          payload: { msg: err.response.statusText, status: err.response.status }\r\n        })\r\n      }\r\n    }\r\n    //תזכור להוסיף פקודה שמוחקת את כל החיות של המשתמש\r\n  };"]},"metadata":{},"sourceType":"module"}
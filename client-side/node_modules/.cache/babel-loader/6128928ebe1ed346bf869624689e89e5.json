{"ast":null,"code":"// import React, { Fragment, useCallback, useState } from 'react'\n// import PropTypes from 'prop-types'\n// import Dropzone from '../../../drag&drop/Dropezone'\n// import {connect} from 'react-redux'\n// import { withRouter, Link} from 'react-router-dom'\n// import {createPictureProfile} from '../../../../actions/profileActs'\n// import Cropper from 'react-easy-crop'\n// import getCroppedImg from '../../../../cropImage'\n// const SetUpPicture = ({\n//     createPictureProfile,\n//      history}) => {\n//     const [dropStyle, setDropStyle] = useState('bigDropzone')\n//     const [image, setImage] = useState('')\n//     const [crop, setCrop] = useState({ x: 0, y: 0 })\n//     const [zoom, setZoom] = useState(1)\n//     const [rotation, setRotation] = useState(0)\n//     const [croppedAreaPixels, setCroppedAreaPixels] = useState(null)\n//     const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n//         setCroppedAreaPixels(croppedAreaPixels)\n//       }, [])\n//     const getBase64 = (image) => {\n//         return new Promise((resolve,reject) => {\n//            const reader = new FileReader();\n//            reader.onload = () => resolve(reader.result);\n//            reader.onerror = error => reject(error);\n//            reader.readAsDataURL(image)\n//         })}\n//     const onDrop =async e =>{\n//            setImage(await getBase64(e[0]))\n//            setCrop({ x: 0, y: 0})\n//            setZoom(1)\n//            setRotation(0)  \n//            setDropStyle('smlDropzone')\n//       }\n//     const sentData = async (e) => {\n//         e.preventDefault()\n//         const croppedImage = await getCroppedImg(\n//                 image,\n//                 croppedAreaPixels,\n//                 rotation\n//         )\n//         createPictureProfile(croppedImage , history)\n//         }\n//     return (\n//         <Fragment>\n//         <form className=\"form\" onSubmit= {e => sentData(e)}>\n//          <div className=\"form-group\">\n//          <h1 className='large text-primary'>Upload a profile picture!</h1>\n//         </div>\n//         {image ? <div>\n//       <div className=\"crop-container\">\n//         <Cropper\n//           image={image}\n//           crop={crop}\n//           zoom={zoom}\n//           rotation = {rotation}\n//           aspect={1}\n//           cropShape=\"round\"\n//           showGrid={false}\n//           restrictPosition={false}\n//           onCropChange={setCrop}\n//           onZoomChange={setZoom}\n//           onCropComplete={onCropComplete}\n//         /></div><div>\n//         <strong> Zoom</strong>\n//         <strong className=\"text-controler\"> Rotation</strong>\n//         <span className=\"controlers-container zoom-controler\">\n//         <input \n//             type=\"range\" \n//             className=\"controlers\"\n//             min={1} \n//             max={3}\n//             value={zoom}\n//             step={0.1}\n//             onChange={(e) => setZoom(e.target.value)}\n//         /></span>\n//         <span className=\"controlers-container rotation-controler\">\n//         <input \n//             type=\"range\" \n//             className=\"controlers\"\n//             min={0} \n//             max={360}\n//             value={rotation}\n//             step={1}\n//             onChange={(e) => setRotation(e.target.value)}\n//         /></span>\n//       </div>\n//       </div>: null}\n//       <Dropzone \n//         onDrop={(e) => onDrop(e)}  \n//         multiple={false}\n//         style={dropStyle}/>\n//         <input type=\"submit\" className=\"btn btn-primary my-1\"  value='Submit'/>\n//         <button className=\"btn btn-light my-1\"> <Link to='/dashboard'>Skip</Link></button>\n//       </form>\n//     </Fragment>\n//     )\n//      }\n// SetUpPicture.propTypes = {\n//     createPictureProfile: PropTypes.func.isRequired,\n// }\n// export default connect(null,\n//     {createPictureProfile}) (withRouter(SetUpPicture))","map":{"version":3,"sources":["C:/Users/shahar/Desktop/webS/MyProjacts/ChatPet/client-side/src/components/profile/forms/ProfilePicture/SetUpPicture.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA","sourcesContent":["// import React, { Fragment, useCallback, useState } from 'react'\r\n// import PropTypes from 'prop-types'\r\n// import Dropzone from '../../../drag&drop/Dropezone'\r\n// import {connect} from 'react-redux'\r\n// import { withRouter, Link} from 'react-router-dom'\r\n// import {createPictureProfile} from '../../../../actions/profileActs'\r\n// import Cropper from 'react-easy-crop'\r\n// import getCroppedImg from '../../../../cropImage'\r\n\r\n\r\n// const SetUpPicture = ({\r\n//     createPictureProfile,\r\n//      history}) => {\r\n//     const [dropStyle, setDropStyle] = useState('bigDropzone')\r\n//     const [image, setImage] = useState('')\r\n//     const [crop, setCrop] = useState({ x: 0, y: 0 })\r\n//     const [zoom, setZoom] = useState(1)\r\n//     const [rotation, setRotation] = useState(0)\r\n//     const [croppedAreaPixels, setCroppedAreaPixels] = useState(null)\r\n//     const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n//         setCroppedAreaPixels(croppedAreaPixels)\r\n//       }, [])\r\n\r\n//     const getBase64 = (image) => {\r\n//         return new Promise((resolve,reject) => {\r\n//            const reader = new FileReader();\r\n//            reader.onload = () => resolve(reader.result);\r\n//            reader.onerror = error => reject(error);\r\n//            reader.readAsDataURL(image)\r\n//         })}\r\n\r\n\r\n//     const onDrop =async e =>{\r\n//            setImage(await getBase64(e[0]))\r\n//            setCrop({ x: 0, y: 0})\r\n//            setZoom(1)\r\n//            setRotation(0)  \r\n//            setDropStyle('smlDropzone')\r\n//       }\r\n      \r\n    \r\n\r\n//     const sentData = async (e) => {\r\n//         e.preventDefault()\r\n//         const croppedImage = await getCroppedImg(\r\n//                 image,\r\n//                 croppedAreaPixels,\r\n//                 rotation\r\n//         )\r\n//         createPictureProfile(croppedImage , history)\r\n//         }\r\n                \r\n\r\n//     return (\r\n//         <Fragment>\r\n//         <form className=\"form\" onSubmit= {e => sentData(e)}>\r\n//          <div className=\"form-group\">\r\n//          <h1 className='large text-primary'>Upload a profile picture!</h1>\r\n//         </div>\r\n//         {image ? <div>\r\n//       <div className=\"crop-container\">\r\n//         <Cropper\r\n//           image={image}\r\n//           crop={crop}\r\n//           zoom={zoom}\r\n//           rotation = {rotation}\r\n//           aspect={1}\r\n//           cropShape=\"round\"\r\n//           showGrid={false}\r\n//           restrictPosition={false}\r\n//           onCropChange={setCrop}\r\n//           onZoomChange={setZoom}\r\n//           onCropComplete={onCropComplete}\r\n//         /></div><div>\r\n//         <strong> Zoom</strong>\r\n//         <strong className=\"text-controler\"> Rotation</strong>\r\n//         <span className=\"controlers-container zoom-controler\">\r\n//         <input \r\n//             type=\"range\" \r\n//             className=\"controlers\"\r\n//             min={1} \r\n//             max={3}\r\n//             value={zoom}\r\n//             step={0.1}\r\n//             onChange={(e) => setZoom(e.target.value)}\r\n//         /></span>\r\n//         <span className=\"controlers-container rotation-controler\">\r\n//         <input \r\n//             type=\"range\" \r\n//             className=\"controlers\"\r\n//             min={0} \r\n//             max={360}\r\n//             value={rotation}\r\n//             step={1}\r\n//             onChange={(e) => setRotation(e.target.value)}\r\n//         /></span>\r\n//       </div>\r\n//       </div>: null}\r\n//       <Dropzone \r\n//         onDrop={(e) => onDrop(e)}  \r\n//         multiple={false}\r\n//         style={dropStyle}/>\r\n//         <input type=\"submit\" className=\"btn btn-primary my-1\"  value='Submit'/>\r\n//         <button className=\"btn btn-light my-1\"> <Link to='/dashboard'>Skip</Link></button>\r\n//       </form>\r\n//     </Fragment>\r\n//     )\r\n//      }\r\n\r\n// SetUpPicture.propTypes = {\r\n//     createPictureProfile: PropTypes.func.isRequired,\r\n// }\r\n\r\n// export default connect(null,\r\n//     {createPictureProfile}) (withRouter(SetUpPicture))\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_EROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT, CLEAR_PROFILE } from './consts';\nimport { setAlert } from './alertAct';\nimport setAuthToken from '../setAuthToken'; //load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      data: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_EROR\n    });\n  }\n}; //register\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      data: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //login\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('http://localhost:5000/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      data: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //logout\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n};","map":{"version":3,"sources":["C:/Users/shahar/Desktop/webS/MyProjacts/ChatPet/client-side/src/actions/authActs.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_EROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","CLEAR_PROFILE","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    USER_LOADED,\r\n    AUTH_EROR,\r\n    LOGIN_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGOUT,\r\n    CLEAR_PROFILE\r\n    } from './consts'\r\nimport { setAlert } from './alertAct'\r\nimport setAuthToken from '../setAuthToken'\r\n\r\n\r\n//load user\r\nexport const loadUser = () => async dispatch => {\r\n    if (localStorage.token) {\r\n      setAuthToken(localStorage.token)\r\n    }\r\n  \r\n    try {\r\n      const res = await axios.get('/api/auth')\r\n\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        data: res.data\r\n      })\r\n    } catch (err) {\r\n      dispatch({\r\n        type: AUTH_EROR\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n//register\r\nexport const register = ({ name, email, password }) => async dispatch => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n  \r\n    const body = JSON.stringify({ name, email, password });\r\n  \r\n    try {\r\n      const res = await axios.post('/api/users', body, config);\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        data: res.data\r\n      });\r\n      dispatch(loadUser())\r\n    } catch (err) {\r\n      const errors = err.response.data.errors;\r\n  \r\n      if (errors) {\r\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n      }\r\n  \r\n      dispatch({\r\n        type: REGISTER_FAIL\r\n      })\r\n    }\r\n  }    \r\n\r\n\r\n  //login\r\nexport const login = ( email, password) => async dispatch => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n  \r\n    const body = JSON.stringify({ email, password });\r\n  \r\n    try {\r\n      const res = await axios.post('http://localhost:5000/api/auth', body, config);\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        data: res.data\r\n      })\r\n      dispatch(loadUser())\r\n    } catch (err) {\r\n      const errors = err.response.data.errors;\r\n  \r\n      if (errors) {\r\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n      }\r\n  \r\n      dispatch({\r\n        type: LOGIN_FAIL\r\n      })\r\n    }\r\n  }\r\n\r\n//logout\r\n  export const logout = () => dispatch =>{\r\n    dispatch({\r\n      type: LOGOUT\r\n    })\r\n    dispatch({\r\n      type: CLEAR_PROFILE\r\n    })\r\n  }"]},"metadata":{},"sourceType":"module"}